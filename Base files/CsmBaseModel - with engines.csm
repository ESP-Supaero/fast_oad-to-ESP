# CeRAS Aircraft - Baseline model
# Written by Jos√© Carola dos Santos and Sameer Sheriff

# Fuselage variables
DESPMTR fus:height 4.05988
DESPMTR fus:width  3.9198
DESPMTR fus:length 37.507 
DESPMTR fus:front_length 6.902 
DESPMTR fus:rear_length 14.616

#defining ratios from CeRAS model
SET ratio:x fus:length/3.749
SET ratio:y fus:height/0.4140
SET ratio:z fus:width/0.4000

# Values from FAST_OAD for calculations
DESPMTR wing:mac:Xat25     17.300   #X-position of the 25% of mean aerodynamic chord of wing w.r.t. aircraft nose
DESPMTR wing:mac:leadingX  3.082    #X-position of leading edge of mean aerodynamic chord w.r.t. leading edge of root chord
DESPMTR wing:mac:length    3.873    #length of mean aerodynamic chord of wing

DESPMTR wing:kink:leadingX 3.1478   #X-position of leading edge at wing kink w.r.t. leading edge of root chord
DESPMTR wing:kink:y 	   8.4142   #Y-position of wing kink 	

DESPMTR wing:tip:leadingX  9.98716  #X-position of leading edge at wing kink w.r.t. leading edge of root chord
DESPMTR wing:tip:y         22.43797 #Y-position of wing kink 	

DESPMTR vtp:mac25:Xat25    2.7163   #X-position of the 25% of mean aerodynamic chord of vertical tail w.r.t. leading edge of root chord
DESPMTR vtp:mac25:wingMac  15.7064  #distance along X between 25% MAC of wing and 25% MAC of vertical tail
DESPMTR vtp:sweep:0        40.5148  #sweep angle at leading edge of vertical tail
DESPMTR vtp:span    	   7.74816  #vertical tail span

DESPMTR	htp:mac25:Xat25    1.68011	#X-position of the 25% of mean aerodynamic chord of horizontal tail w.r.t. leading edge of root chord
DESPMTR htp:mac25:wingMac  16.8317  #distance along X between 25% MAC of wing and 25% MAC of horizontal tail
DESPMTR htp:sweep:0        33.3165  #sweep angle at leading edge of horizontal tail
DESPMTR htp:span           12.4611  #horizontal tail span

## WING VARIABLES

# Root airfoil values
SET       wing:root:X     (wing:mac:Xat25)-(wing:mac:leadingX)-(wing:mac:length/4) 
DESPMTR   wing:root:Y     0.00      # Y-coordinte of root leading edge
DESPMTR   wing:root:Z     0.00      # Z-coordinte of root leading edge
DESPMTR   wing:root:c     6.0559    # chord of root
DESPMTR   wing:root:t     0.1575    # thickness/chord of root
DESPMTR   wing:root:m     0.00      # camber/chord of root
DESPMTR   wing:root:a     0.00      # angle of attack of root (deg)
# intermediate airfoil values - coincident with fuselage
SET       wing:int:X      wing:root:X    # X-coordinte of intermediate airfoil section - same as root airfoil
DESPMTR   wing:int:Y      0.00           # Y-coordinte of intermediate airfoil section
SET       wing:int:Z      (fus:width)/2  # Z-coordinte of intermediate airfoil section
SET       wing:int:c      wing:root:c    # chord of intermediate airfoil section
SET       wing:int:t      wing:root:t    # thickness/chord of intermediate airfoil section
DESPMTR   wing:int:m      0.00           # camber/chord of intermediate airfoil section
DESPMTR   wing:int:a      0.00           # angle of attack of intermediate airfoil section (deg)
# second intermediate values - airfoil at kink 
SET       wing:kink:X     (wing:root:X)+(wing:kink:leadingX) # X-coordinte of root leading edge
DESPMTR   wing:kink:Y     0.00     	   # Y-coordinte of root leading edge
SET       wing:kink:Z     wing:kink:y  # Z-coordinte of root leading edge   
DESPMTR   wing:kink:c     2.9081       # chord at kink
DESPMTR   wing:kink:t     0.11936      # thickness/chord of root
DESPMTR   wing:kink:m     0.00         # camber/chord of root
DESPMTR   wing:kink:a     0.00         # angle of attack of root (deg)
# tip airfoil values
SET       wing:tip:X      (wing:root:X)+(wing:tip:leadingX) # X-coordinte of tip leading edge
DESPMTR   wing:tip:Y      0.00         # Y-coordinte of tip leading edge
SET       wing:tip:Z      wing:tip:y   # Z-coordinte of tip leading edge 
DESPMTR   wing:tip:c      1.1618       # chord of tip
DESPMTR   wing:tip:t      0.1092       # thickness/chord of tip
DESPMTR   wing:tip:m      0.00         # camber/chord of tip
DESPMTR   wing:tip:a      0.00         # angle of attack of tip (deg)

## HORIZONTAL TAIL PLANE VARIABLES

# root airfoil values 
SET       htp:root:X     (wing:mac:Xat25)+(htp:mac25:wingMac)-(htp:mac25:Xat25)
DESPMTR   htp:root:Y     0.00     # Y-coordinte of root leading edge
DESPMTR   htp:root:Z     0.00     # Z-coordinte of root leading edge
DESPMTR   htp:root:c     4.47105  # chord of root
DESPMTR   htp:root:t     0.1      # thickness/chord of root
DESPMTR   htp:root:m     0.00     # camber/chord of root
DESPMTR   htp:root:a     0.00     # angle of attack of root (deg)
# tip airfoil values 
SET       htp:tip:X      (htp:root:X)+(tand(htp:sweep:0)*(htp:span/2)) # X-coordinte of tip leading edge
DESPMTR   htp:tip:Y      0.00         # Y-coordinte of tip leading edge
SET       htp:tip:Z      (htp:span)/2 # Z-coordinte of tip leading edge
DESPMTR   htp:tip:c      1.34132      # chord of tip
DESPMTR   htp:tip:t      0.1          # thickness/chord of tip
DESPMTR   htp:tip:m      0.00         # camber/chord of tip
DESPMTR   htp:tip:a      0.00         # angle of attack of tip (deg)

## VERTICAL TAIL PLANE VARIABLES

#root
SET       vtp:root:X     (wing:mac:Xat25)+(vtp:mac25:wingMac)-(vtp:mac25:Xat25)
DESPMTR   vtp:root:Y     0.00      # Y-coordinte of root leading edge
DESPMTR   vtp:root:Z     0.00      # Z-coordinte of root leading edge  # -1.71
DESPMTR   vtp:root:c     6.83255   # chord of root     
DESPMTR   vtp:root:t     0.1       # thickness/chord of root
DESPMTR   vtp:root:m     0.00      # camber/chord of root
DESPMTR   vtp:root:a     0.00      # angle of attack of root (deg)
# tip
SET       vtp:tip:X      (vtp:root:X)+(tand(vtp:sweep:0)*vtp:span) # X-coordinte of tip leading edge
DESPMTR   vtp:tip:Y      0.0       # Y-coordinte of tip leading edge
SET       vtp:tip:Z      (vtp:span)  # Z-coordinte of tip leading edge  # 7.748163043445385 + 1.00
DESPMTR   vtp:tip:c      2.04976   # chord length at tip of vertical tail
DESPMTR   vtp:tip:t      0.1       # thickness/chord of tip
DESPMTR   vtp:tip:m      0.00      # camber/chord of tip
DESPMTR   vtp:tip:a      0.00      # angle of attack of tip (deg)

## Building cylindrical part of fuselage
MARK
   UDPRIM supell rx fus:width/2 ry fus:height/2
   ROTATEY 90 0 0
   TRANSLATE fus:front_length 0 0
   UDPRIM supell rx fus:width/2 ry fus:height/2
   ROTATEY 90 0 0
   TRANSLATE (fus:length-fus:rear_length) 0 0 
   RULE
GROUP
STORE fus_cylindrical

## Building Fuselage Front section
# Supell - super ellipse creates the circular sections
# rx refers to the width and ry referes to the height
MARK 
   POINT 0 -0.066*(ratio:y) 0
   #circle1
   UDPRIM supell rx 0.078*(ratio:y/2) ry 0.08*(ratio:z/2) 
   ROTATEY 90 0 0 
   TRANSLATE (0.017*ratio:x) (-0.065*ratio:y) 0
   #circle2
   UDPRIM supell rx 0.1330*(ratio:y/2) ry 0.135*(ratio:z/2) 
   ROTATEY 90 0 0 
   TRANSLATE (0.049*ratio:x) (-0.065*ratio:y) 0
   #circle3
   UDPRIM supell rx 0.1670*(ratio:y/2) ry 0.1660*(ratio:z/2) 
   ROTATEY 90 0 0 
   TRANSLATE (0.077*ratio:x) (-0.063*ratio:y) 0
   #circle4
   UDPRIM supell rx 0.2190*(ratio:y/2) ry 0.2061*(ratio:z/2) 
   ROTATEY 90 0 0 
   TRANSLATE (0.129*ratio:x) (-0.061*ratio:y) 0
   #circle5
   UDPRIM supell rx 0.2870*(ratio:y/2) ry 0.2970*(ratio:z/2) 
   ROTATEY 90 0 0 
   TRANSLATE (0.207*ratio:x) (-0.032*ratio:y) 0
   #circle6
   UDPRIM supell rx 0.3450*(ratio:y/2) ry 0.3561*(ratio:z/2) 
   ROTATEY 90 0 0 
   TRANSLATE (0.298*ratio:x) (-0.016*ratio:y) 0
   #circle7
   UDPRIM supell rx 0.3840*(ratio:y/2) ry 0.3924*(ratio:z/2) 
   ROTATEY 90 0 0 
   TRANSLATE (0.415*ratio:x) (-0.0068*ratio:y) 0
   #circle8
   UDPRIM supell rx 0.3990*(ratio:y/2) ry 0.4090*(ratio:z/2) 
   ROTATEY 90 0 0 
   TRANSLATE (0.531*ratio:x) 0 0
   #circle9
   UDPRIM supell rx fus:width/2 ry fus:height/2 #rx 0.4000*(ratio:y/2) ry 0.4140*(ratio:z/2) 
   ROTATEY 90 0 0 
   TRANSLATE fus:front_length 0 0
   RULE
STORE fus_front

# Building Fuselage Rear section
# Supell - super ellipse creates the circular sections
# rx refers to the width and ry referes to the height
MARK
  MARK
   #circle1
   UDPRIM supell rx fus:width/2 ry fus:height/2 #rx 0.4000*ratio:y/2 ry 0.4140*ratio:z/2
   ROTATEY 90 0 0 
   TRANSLATE (fus:length-fus:rear_length) 0 0
   #circle2
   UDPRIM supell rx 0.40*ratio:y/2 ry 0.4100*ratio:z/2
   ROTATEY 90 0 0 
   TRANSLATE (2.538*ratio:x) (+0.0020*ratio:y) 0
   #circle3
   UDPRIM supell rx 0.40*ratio:y/2 ry 0.38*ratio:z/2 
   ROTATEY 90 0 0 
   TRANSLATE (2.753*ratio:x) (+0.0170*ratio:y) 0
   #circle4
   UDPRIM supell rx 0.350*ratio:y/2 ry 0.33*ratio:z/2 
   ROTATEY 90 0 0 
   TRANSLATE (2.986*ratio:x) (+0.0392*ratio:y) 0
   #circle5
   UDPRIM supell rx 0.2650*ratio:y/2 ry 0.2711*ratio:z/2 
   ROTATEY 90 0 0 
   TRANSLATE (3.205*ratio:x) (+0.0610*ratio:y) 0
   #circle6
   UDPRIM supell rx 0.1730*ratio:y/2 ry 0.18*ratio:z/2 
   ROTATEY 90 0 0 
   TRANSLATE (3.507*ratio:x) (+0.0940*ratio:y) 0
   #circle7
   UDPRIM supell rx 0.1210*ratio:y/2 ry 0.117*ratio:z/2 
   ROTATEY 90 0 0 
   TRANSLATE (3.651*ratio:x) (+0.1060*ratio:y) 0
   #circle8
   UDPRIM supell rx 0.0529*ratio:y/2 ry 0.051*ratio:z/2 
   ROTATEY 90 0 0 
   TRANSLATE fus:length (+0.110*ratio:y) 0
   RULE
STORE fus_rear
   
RESTORE fus_front
RESTORE fus_cylindrical
UNION
RESTORE fus_rear
UNION
DUMP fuselage.stp
STORE fus_full

## Building wing
MARK
   # right wing tip
   UDPRIM    naca   thickness  wing:tip:t   camber  wing:tip:m
   SCALE     wing:tip:c
   ROTATEZ  -wing:tip:a   0      0
   TRANSLATE wing:tip:X   wing:tip:Y  -wing:tip:Z
   # right second intermediate
   UDPRIM    naca   thickness  wing:kink:t   camber  wing:kink:m
   SCALE     wing:kink:c
   ROTATEZ  -wing:kink:a   0      0
   TRANSLATE wing:kink:X   wing:kink:Y  -wing:kink:Z
   # right intermediate
   UDPRIM    naca   thickness  wing:int:t   camber  wing:int:m
   SCALE     wing:int:c
   ROTATEZ  -wing:int:a   0      0
   TRANSLATE wing:int:X   wing:int:Y  -wing:int:Z
   # wing root
   UDPRIM    naca   thickness  wing:root:t  camber  wing:root:m
   SCALE     wing:root:c
   ROTATEZ  -wing:root:a  0      0
   TRANSLATE wing:root:X  wing:root:Y  wing:root:Z
   # left intermediate
   UDPRIM    naca   thickness  wing:int:t   camber  wing:int:m
   SCALE     wing:int:c
   ROTATEZ  -wing:int:a   0      0
   TRANSLATE wing:int:X   wing:int:Y   wing:int:Z
   # left second intermediate
   UDPRIM    naca   thickness  wing:kink:t   camber  wing:kink:m
   SCALE     wing:kink:c
   ROTATEZ  -wing:kink:a   0      0
   TRANSLATE wing:kink:X   wing:kink:Y   wing:kink:Z
   # left wing tip
   UDPRIM    naca   thickness  wing:tip:t   camber  wing:tip:m
   SCALE     wing:tip:c
   ROTATEZ  -wing:tip:a   0      0
   TRANSLATE wing:tip:X   wing:tip:Y   wing:tip:Z

# ruled surface
RULE
#ATTRIBUTE _color $red
ATTRIBUTE _color $cyan
DUMP wing_only.stp   
STORE wing

## Building horizontal tail plane
MARK
   # right horizontal wing tip
   UDPRIM    naca   thickness  htp:tip:t   camber  htp:tip:m
   SCALE     htp:tip:c
   ROTATEZ  -htp:tip:a   0      0
   TRANSLATE htp:tip:X   htp:tip:Y  -htp:tip:Z
   # horizontal wing root
   UDPRIM    naca   thickness  htp:root:t  camber  htp:root:m
   SCALE     htp:root:c
   ROTATEZ  -htp:root:a  0      0
   TRANSLATE htp:root:X  htp:root:Y  htp:root:Z
   # left horizontal wing tip
   UDPRIM    naca   thickness  htp:tip:t   camber  htp:tip:m
   SCALE     htp:tip:c
   ROTATEZ  -htp:tip:a   0      0
   TRANSLATE htp:tip:X   htp:tip:Y   htp:tip:Z  
# ruled surface
RULE
ATTRIBUTE _color $red  
TRANSLATE 0 1.1 0
DUMP htp.stp
STORE htp
   
   
## Building vertical tail plane
MARK
   # vertical wing tip
   UDPRIM    naca   thickness  vtp:tip:t   camber  vtp:tip:m
   SCALE     vtp:tip:c
   ROTATEZ  -vtp:tip:a   0      0
   TRANSLATE vtp:tip:X   vtp:tip:Y  -vtp:tip:Z
   # vertical wing root
   UDPRIM    naca   thickness  vtp:root:t  camber  vtp:root:m
   SCALE     vtp:root:c
   ROTATEZ  -vtp:root:a  0      0
   TRANSLATE vtp:root:X  vtp:root:Y  vtp:root:Z  
RULE
ATTRIBUTE _color $yellow  
ROTATEX 90 0 0
TRANSLATE 0 1.4 0
DUMP vtp.stp
STORE vtp
   

# ENGINES
# NOTE: For cylinders in .csm code - 5th parameter is the cylnder height and 7th parameter is the base radius
   
# LEFT ENGINE
# Builds the outer cylinder of the left nacelle
CYLINDER 0 0 0 0 5 0 1.7
ROTATEZ 90 0 0
TRANSLATE 17.7 -2.5 7
   
# Builds an inner cylinder that is going to be subtracted to the first cylinder created in order to create a "cylinder shell" structure - nacelle
CYLINDER 0 0 0 0 5 0 1.5
ROTATEZ 90 0 0
TRANSLATE 17.7 -2.5 7
SUBTRACT
   
# Builds the most inner cylinder that represents the engine
CYLINDER 0 0 0 0 4.6 0 1
ROTATEZ 90 0 0
TRANSLATE 17.5 -2.5 7


# RIGHT ENGINE
# Builds the outer cylinder of the right nacelle
CYLINDER 0 0 0 0 5 0 1.7
ROTATEZ 90 0 0
TRANSLATE 17.7 -2.5 -7
   
# Builds an inner cylinder that is going to be subtracted to the first cylinder created in order to create a "cylinder shell" structure - nacelle
CYLINDER 0 0 0 0 5 0 1.5
ROTATEZ 90 0 0
TRANSLATE 17.7 -2.5 -7
SUBTRACT
   
# Builds the most inner cylinder that represents the engine
CYLINDER 0 0 0 0 4.6 0 1
ROTATEZ 90 0 0
TRANSLATE 17.5 -2.5 -7


# PYLONS
# The pylons are modeled by creating some sections based on four parameters - x and y position, zmin and zmax
# In this case, there is created a list of 9 sections (this could be changed according to the user will)
   
# Here, the pylon model is a 9 row, 4 column, Design Parameter with the given values. The values are listed across rows, 
# with semi-colons between the various entries. Since spaces are used to enhance readability, the entire list
# of values is placed between quotation marks. Also, since the inputs are split across multiple lines, the backslash
# character is used to denote that the next line should be concatenated with the current line before processing;
# all characters starting at the backslash are ignored.
dimension modelpylon 9 4 1
#				 	   x      y    zmin  zmax
despmtr modelpylon " 0.50; -0.30; -0.10; 0.20;\
			   		 1.40; -0.60; -0.10; 0.50;\
			   		 2.20; -0.60; -0.10; 0.70;\
			   		 2.90; -0.60; -0.10; 0.90;\
   			   		 3.60; -0.60; -0.10; 0.90;\
   			     	 4.30; -0.60; -0.10; 0.90;\
		  	   		 5.00; -0.60;  0.30; 0.90;\
   			   		 5.50; -0.60;  0.60; 0.90;\
   			   		 5.80; -0.60;  0.85; 0.88;"

# The pylonList Design Parameter has 2 rows and 4 columns.
dimension pylonList 2 4 1
despmtr   pylonList "0.10; 0; 1; 0;\
				     0.05; 0; 0; 1"

# Build the pylon
mark 
# We want to begin the pylon at a point. This is accomplished by using a "point" statement:
point 0 0 0

# Then we need to generate the remaining 9 cross-sections. This is done with a "pattern"
# (similar to a "for" loop in other programming languages).
patbeg i modelpylon.nrow
	udprim ellipse ry abs(modelpylon[i,2]) rz (modelpylon[i,4]-modelpylon[i,3])/2
	translate      modelpylon[i,1] 0 		  (modelpylon[i,4]+modelpylon[i,3])/2
patend
# Within the pattern we create an ellipse (using the "ellipse" user-defined primitive) with its Parameters
# taken from the second, third, and fourth columns of the modelPylon Design Parameter. Each cross-section is then
# translated into its final position using the "translate" statement. The "patend" statement closes the pattern.
   
# Finally we will generate the pylon by blending the point and 9 sections (everything since the "mark") using:
blend pylonList
ROTATEX -90 0 0
TRANSLATE 13.1 -0.85 7
RESTORE .
# Creates the second pylon by mirroring the first one created in relation to the xy plane
MIRROR 0 0 1
DUMP pylon.stp
STORE pylon
   
   
# FAIRING
# The fairing is modeled by creating some sections based on four parameters - x and y position, zmin and zmax
# In this case, there is created a list of 6 sections (this could be changed according to the user will)
   
# Here, the fairing model is a 6 row, 4 column, Design Parameter with the given values. The values are listed across rows, 
# with semi-colons between the various entries. Since spaces are used to enhance readability, the entire list
# of values is placed between quotation marks. Also, since the inputs are split across multiple lines, the backslash
# character is used to denote that the next line should be concatenated with the current line before processing;
# all characters starting at the backslash are ignored.
dimension modelfairing 6 4 1
#				 	     x     y     zmin   zmax
despmtr modelfairing " 0.50; -0.20; -0.30;     0;\
			  		   1.00; -0.35; -0.55;     0;\
			  		   1.80; -0.50; -0.80;     0;\
			  		   2.50; -0.50; -0.80;     0;\
   			   		   3.20; -0.35; -0.80; -0.20;\
   			   		   3.80; -0.10; -0.65; -0.40;"

# The fairingList Design Parameter has 2 rows and 4 columns.
dimension fairingList 2 4 1
despmtr   fairingList "0.10; 0; 1; 0;\
				  	   0.05; 0; 0; 1"

# Build the fairing
mark 
# We want to begin the fairing at a point. This is accomplished by using a "point" statement:
point 0 0 0
   
# Then we need to generate the remaining 6 cross-sections. This is done with a "pattern"
# (similar to a "for" loop in other programming languages).
patbeg i modelfairing.nrow
	udprim ellipse ry abs(modelfairing[i,2]) rz (modelfairing[i,4]-modelfairing[i,3])/2
	translate      modelfairing[i,1] 0 			(modelfairing[i,4]+modelfairing[i,3])/2
patend
# Within the pattern we create an ellipse (using the "ellipse" user-defined primitive) with its Parameters
# taken from the second, third, and fourth columns of the modelfairing Design Parameter. Each cross-section is then
# translated into its final position using the "translate" statement. The "patend" statement closes the pattern.
   
# Finally we will generate the fairing by blending the point and 6 sections (everything since the "mark") using:
blend fairingList
ROTATEX -90 0 0
TRANSLATE 18.2 -0.05 12
RESTORE .
# Creates the second fairing by mirroring the first one created in relation to the xy plane
MIRROR 0 0 1
DUMP fairing.stp
STORE fairing

# FINAL COMMANDS
RESTORE fus_full
RESTORE wing
UNION
RESTORE htp
UNION
RESTORE vtp
UNION
RESTORE pylon
UNION
RESTORE fairing
UNION
DUMP full_model.stp
END